// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { LoginForAccessTokenData, LoginForAccessTokenError, LogoutData, LogoutError, ReadUsersMeData, ReadUsersMeError, CreateUserData, CreateUserError, AdminCreateUserData, AdminCreateUserError, AdminUpdateUserData, AdminUpdateUserError, AdminGetClientsData, AdminGetClientsError, AdminGetClientData, AdminGetClientError, AdminDeleteClientData, AdminDeleteClientError, AdminDeleteClientsData, AdminDeleteClientsError, AdminCreateArtifactData, AdminCreateArtifactError, AdminUpdateArtifactData, AdminUpdateArtifactError, AdminGetArtifactData, AdminGetArtifactError, AdminDeleteArtifactData, AdminDeleteArtifactError, AdminDeleteArtifactsData, AdminDeleteArtifactsError, AdminGetArtifactsData, AdminGetArtifactsError, GetChatsData, GetChatsError, DeleteChatsData, DeleteChatsError, GetChatData, GetChatError, AdminGetClientChatsData, AdminGetClientChatsError, AdminGetClientChatData, AdminGetClientChatError, ClientChatDocsData, AdminChatDocsData, AdminCreateAgentData, AdminCreateAgentError, AdminUpdateAgentData, AdminUpdateAgentError, AdminGetAgentsData, AdminGetAgentsError, AdminGetAgentData, AdminGetAgentError, AdminDeleteAgentData, AdminDeleteAgentError, AdminDeleteAgentsData, AdminDeleteAgentsError, AdminUpdateActiveAgentData, AdminUpdateActiveAgentError, AdminGetActiveAgentData, AdminGetActiveAgentError, AdminCreateGroupData, AdminCreateGroupError, AdminUpdateGroupData, AdminUpdateGroupError, AdminGetGroupsData, AdminGetGroupsError, AdminGetGroupData, AdminGetGroupError, AdminDeleteGroupData, AdminDeleteGroupError, AdminDeleteGroupsData, AdminDeleteGroupsError, ServeSpaData, ServeSpaError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login For Access Token
 * OAuth2 compatible token login, set cookies for future requests
 */
export const loginForAccessToken = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, LoginForAccessTokenError, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Logout
 * Logout a user by invalidating their tokens and clearing cookies
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, LogoutError, ThrowOnError>({
        url: '/api/auth/logout',
        ...options
    });
};

/**
 * Read Users Me
 * Get details of the currently logged in user
 */
export const readUsersMe = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ReadUsersMeError, ThrowOnError>({
        url: '/api/users/me',
        ...options
    });
};

/**
 * Create User
 * Register a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateUserError, ThrowOnError>({
        url: '/api/users/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Create User
 * Admin create client user through the dashboard.
 * Password is auto generated.
 * Only authenticated admin users can access this endpoint.
 */
export const adminCreateUser = <ThrowOnError extends boolean = false>(options: Options<AdminCreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminCreateUserError, ThrowOnError>({
        url: '/api/users/create-user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Update User
 * Admin update client user through the dashboard.
 * Only authenticated admin users can access this endpoint.
 */
export const adminUpdateUser = <ThrowOnError extends boolean = false>(options: Options<AdminUpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminUpdateUserError, ThrowOnError>({
        url: '/api/users/update-user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Get Clients
 * Get all client users created by the current admin.
 * Only authenticated admin users can access this endpoint.
 */
export const adminGetClients = <ThrowOnError extends boolean = false>(options?: Options<AdminGetClientsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, AdminGetClientsError, ThrowOnError>({
        url: '/api/users/get-clients',
        ...options
    });
};

/**
 * Admin Get Client
 * Get client specified by id in the request
 * Only authenticated admin users can access this endpoint.
 */
export const adminGetClient = <ThrowOnError extends boolean = false>(options: Options<AdminGetClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminGetClientError, ThrowOnError>({
        url: '/api/users/get-client',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Delete Client
 * Delete client specified by id in the request
 * Only authenticated admin users can access this endpoint.
 */
export const adminDeleteClient = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteClientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminDeleteClientError, ThrowOnError>({
        url: '/api/users/delete-client',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Delete Clients
 * Delete client specified by id in the request
 * Only authenticated admin users can access this endpoint.
 */
export const adminDeleteClients = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteClientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminDeleteClientsError, ThrowOnError>({
        url: '/api/users/delete-clients',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Create Artifact
 * Admin create artifact through the dashboard.
 * Only authenticated admin users can access this endpoint.
 */
export const adminCreateArtifact = <ThrowOnError extends boolean = false>(options: Options<AdminCreateArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminCreateArtifactError, ThrowOnError>({
        url: '/api/artifacts/create-artifact',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Update Artifact
 * Admin update artifact through the dashboard.
 * Only authenticated admin users can access this endpoint.
 */
export const adminUpdateArtifact = <ThrowOnError extends boolean = false>(options: Options<AdminUpdateArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminUpdateArtifactError, ThrowOnError>({
        url: '/api/artifacts/update-artifact',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Get Artifact
 * Get artifact specified by id in the request
 * Only authenticated admin users can access this endpoint.
 */
export const adminGetArtifact = <ThrowOnError extends boolean = false>(options: Options<AdminGetArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminGetArtifactError, ThrowOnError>({
        url: '/api/artifacts/get-artifact',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Delete Artifact
 * Admin delete artifact by artifact id
 * Only authenticated admin users can access this endpoint.
 */
export const adminDeleteArtifact = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminDeleteArtifactError, ThrowOnError>({
        url: '/api/artifacts/delete-artifact',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Delete Artifacts
 * Admin delete multiple artifacts by artifact ids
 * Only authenticated admin users can access this endpoint.
 */
export const adminDeleteArtifacts = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteArtifactsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminDeleteArtifactsError, ThrowOnError>({
        url: '/api/artifacts/delete-artifacts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Get Artifacts
 * Admin ger artifacts through the dashboard.
 * Only authenticated admin users can access this endpoint.
 */
export const adminGetArtifacts = <ThrowOnError extends boolean = false>(options?: Options<AdminGetArtifactsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, AdminGetArtifactsError, ThrowOnError>({
        url: '/api/artifacts/get-artifacts',
        ...options
    });
};

/**
 * Get Chats
 */
export const getChats = <ThrowOnError extends boolean = false>(options?: Options<GetChatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, GetChatsError, ThrowOnError>({
        url: '/api/chat/get-chats',
        ...options
    });
};

/**
 * Delete Chats
 */
export const deleteChats = <ThrowOnError extends boolean = false>(options: Options<DeleteChatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, DeleteChatsError, ThrowOnError>({
        url: '/api/chat/delete-chats',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Chat
 */
export const getChat = <ThrowOnError extends boolean = false>(options: Options<GetChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, GetChatError, ThrowOnError>({
        url: '/api/chat/get-chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Get Client Chats
 */
export const adminGetClientChats = <ThrowOnError extends boolean = false>(options: Options<AdminGetClientChatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminGetClientChatsError, ThrowOnError>({
        url: '/api/chat/admin-get-client-chats',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Get Client Chat
 */
export const adminGetClientChat = <ThrowOnError extends boolean = false>(options: Options<AdminGetClientChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminGetClientChatError, ThrowOnError>({
        url: '/api/chat/admin-get-client-chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Client Chat Docs
 * Documentation for the WebSocket endpoint `/ws/chat`.
 *
 * This WebSocket endpoint allows clients to send and receive messages in real-time.
 */
export const clientChatDocs = <ThrowOnError extends boolean = false>(options?: Options<ClientChatDocsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/chat/ws/chat-docs',
        ...options
    });
};

/**
 * Admin Chat Docs
 * Documentation for the WebSocket endpoint `/ws/admin-chat`.
 *
 * This WebSocket endpoint allows admins to send and receive messages in real-time.
 */
export const adminChatDocs = <ThrowOnError extends boolean = false>(options?: Options<AdminChatDocsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/chat/ws/admin-chat-docs',
        ...options
    });
};

/**
 * Admin Create Agent
 * Admin create agent through the dashboard.
 * Only authenticated admin users can access this endpoint.
 */
export const adminCreateAgent = <ThrowOnError extends boolean = false>(options: Options<AdminCreateAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminCreateAgentError, ThrowOnError>({
        url: '/api/agents/create-agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Update Agent
 * Admin update agent through the dashboard.
 * Only authenticated admin users can access this endpoint.
 */
export const adminUpdateAgent = <ThrowOnError extends boolean = false>(options: Options<AdminUpdateAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminUpdateAgentError, ThrowOnError>({
        url: '/api/agents/update-agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Get Agents
 * Admin get agents through the dashboard.
 * Only authenticated admin users can access this endpoint.
 */
export const adminGetAgents = <ThrowOnError extends boolean = false>(options?: Options<AdminGetAgentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, AdminGetAgentsError, ThrowOnError>({
        url: '/api/agents/get-agents',
        ...options
    });
};

/**
 * Admin Get Agent
 * Get agent specified by id in the request
 * Only authenticated admin users can access this endpoint.
 */
export const adminGetAgent = <ThrowOnError extends boolean = false>(options: Options<AdminGetAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminGetAgentError, ThrowOnError>({
        url: '/api/agents/get-agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Delete Agent
 * Admin delete agent by agent id
 * Only authenticated admin users can access this endpoint.
 */
export const adminDeleteAgent = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminDeleteAgentError, ThrowOnError>({
        url: '/api/agents/delete-agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Delete Agents
 * Admin delete agent by agent id
 * Only authenticated admin users can access this endpoint.
 */
export const adminDeleteAgents = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteAgentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminDeleteAgentsError, ThrowOnError>({
        url: '/api/agents/delete-agents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Update Active Agent
 * Update an organisation's active agent.
 * Only authenticated admin users can access this endpoint.
 */
export const adminUpdateActiveAgent = <ThrowOnError extends boolean = false>(options: Options<AdminUpdateActiveAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminUpdateActiveAgentError, ThrowOnError>({
        url: '/api/organisation/update_active_agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Get Active Agent
 * Get an organisation's current active agent.
 * Only authenticated admin users can access this endpoint.
 */
export const adminGetActiveAgent = <ThrowOnError extends boolean = false>(options?: Options<AdminGetActiveAgentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, AdminGetActiveAgentError, ThrowOnError>({
        url: '/api/organisation/get_active_agent',
        ...options
    });
};

/**
 * Admin Create Group
 * Create user group.
 * Only authenticated admin users can access this endpoint.
 */
export const adminCreateGroup = <ThrowOnError extends boolean = false>(options: Options<AdminCreateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminCreateGroupError, ThrowOnError>({
        url: '/api/groups/create_group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Update Group
 * Update user group.
 * Only authenticated admin users can access this endpoint.
 */
export const adminUpdateGroup = <ThrowOnError extends boolean = false>(options: Options<AdminUpdateGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminUpdateGroupError, ThrowOnError>({
        url: '/api/groups/update_group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Get Groups
 * Get user groups.
 * Only authenticated admin users can access this endpoint.
 */
export const adminGetGroups = <ThrowOnError extends boolean = false>(options?: Options<AdminGetGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, AdminGetGroupsError, ThrowOnError>({
        url: '/api/groups/get_groups',
        ...options
    });
};

/**
 * Admin Get Group
 * Get user group.
 * Only authenticated admin users can access this endpoint.
 */
export const adminGetGroup = <ThrowOnError extends boolean = false>(options: Options<AdminGetGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminGetGroupError, ThrowOnError>({
        url: '/api/groups/get_group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Delete Group
 * Delete user group.
 * Only authenticated admin users can access this endpoint.
 */
export const adminDeleteGroup = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminDeleteGroupError, ThrowOnError>({
        url: '/api/groups/delete_group',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Admin Delete Groups
 * Delete user group.
 * Only authenticated admin users can access this endpoint.
 */
export const adminDeleteGroups = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, AdminDeleteGroupsError, ThrowOnError>({
        url: '/api/groups/delete_groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Serve Spa
 */
export const serveSpa = <ThrowOnError extends boolean = false>(options: Options<ServeSpaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, ServeSpaError, ThrowOnError>({
        url: '/{full_path}',
        ...options
    });
};